# -*- coding: utf-8 -*-
"""Pair Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hh0La7t7z9Z2MkqemENGqUVTVej-yY0-
"""

# Install required package
!pip install kagglehub
# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import kagglehub

pd.set_option('display.max_columns', 100)
pd.set_option('display.max_rows', 100)

print(" Libraries ready")

# Download dataset from Kaggle

path = kagglehub.dataset_download("rovnez/fc-26-fifa-26-player-data")

print(" Dataset downloaded to:", path)

# Load dataset

df = pd.read_csv(path + '/FC26_20250921.csv', low_memory=False)

df.head()

# Show sample player data
df[['short_name', 'age', 'nationality_name', 'club_name', 'overall', 'potential']].head(10)

# Basic summary statistics
print("Total Players:", len(df))
print("Total Countries:", df['nationality_name'].nunique())
print("Total Clubs :", df['club_name'].nunique())

# Visualize distributions (Age & Overall Rating)

plt.figure(figsize=(6,4))
sns.histplot(df['age'], bins=25, kde=True)
plt.title('Age Distribution of Players')
plt.xlabel('Age'); plt.ylabel('Count')
plt.show()

plt.figure(figsize=(6,4))
sns.histplot(df['overall'], bins=25, kde=True)
plt.title('Overall Rating Distribution')
plt.xlabel('Overall Rating'); plt.ylabel('Count')
plt.show()

# Top 10 Nations by Average Overall
top10 = df.sort_values('overall', ascending=False).head(10)[['short_name','age','nationality_name','club_name','overall','potential']]
top10
nation_mean = (
    df.groupby('nationality_name')
      .agg(avg_overall=('overall', 'mean'),
           count=('overall', 'count'))
      .query('count >= 30')
      .sort_values('avg_overall', ascending=False)
      .head(10)
)

plt.figure(figsize=(8,5))
sns.barplot(x='avg_overall', y=nation_mean.index, data=nation_mean)
plt.title('Top 10 Nations (>=30 Players) by Average Overall')
plt.xlabel('Average Overall Rating'); plt.ylabel('Nationality')
plt.show()

# Top 10 Players by Overall Rating
plt.figure(figsize=(8,5))
sns.barplot(data=top10, x='overall', y='short_name', hue='nationality_name', dodge=False)

for index, value in enumerate(top10['overall']):
    plt.text(value+0.3, index, str(value), va='center')

plt.title('Top 10 Players by Overall Rating')
plt.xlabel('Overall Rating'); plt.ylabel('Player')
plt.legend(bbox_to_anchor=(1.02, 1), loc='upper left')
plt.show()

# Create main position column
df['main_position'] = df['player_positions'].apply(lambda x: x.split(',')[0])
print(" 'main_position' column created successfully")

# Select skill columns for analysis
skills = ['pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic']

# Create a smaller DataFrame with position + skills
df_skill = df[['main_position'] + skills].copy()

# Convert all to numeric in case of mixed data types
for c in skills:
    df_skill[c] = pd.to_numeric(df_skill[c], errors='coerce')

print(" Skill data ready for analysis")

# Calculate average skill per position
df['gk_skill'] = df[['goalkeeping_diving','goalkeeping_handling','goalkeeping_kicking',
                     'goalkeeping_positioning','goalkeeping_reflexes']].mean(axis=1)

for c in skills:
    df[c] = df[c].fillna(df['gk_skill'])

df_skill = df[['main_position'] + skills].copy()
for c in skills:
    df_skill[c] = pd.to_numeric(df_skill[c], errors='coerce')

pos_skill_mean = df_skill.groupby('main_position').mean(numeric_only=True).round(1)
pos_skill_mean.head()

# Focus on key positions
main_roles = ['ST', 'CAM', 'CM', 'CDM', 'CB', 'LB', 'RB', 'GK']
pos_skill_filtered = pos_skill_mean.loc[pos_skill_mean.index.isin(main_roles)]
pos_skill_filtered

# Compare skill types across positions

skill_melt = pos_skill_filtered.reset_index().melt(id_vars='main_position',
                                                   var_name='Skill',
                                                   value_name='Average Score')

plt.figure(figsize=(10,6))
sns.barplot(x='Skill', y='Average Score', hue='main_position',
            data=skill_melt, palette='Spectral')

plt.title('Comparison of Skill Types Across Player Positions')
plt.xlabel('Skill Category')
plt.ylabel('Average Attribute Score')
plt.legend(title='Position', bbox_to_anchor=(1.02,1), loc='upper left')
plt.show()